<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
	<http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config" doc:id="6c8e76dd-1ce4-48cf-be76-bcd07058daf6" basePath="centralizeddb">
		<http:listener-connection host="0.0.0.0" port="8081" />
	</http:listener-config>
	<db:config name="CentralizedDB_Config" doc:name="Database Config" doc:id="cfd232f9-6d20-4796-84a8-55e3d4fa0c80" >
		<db:mssql-connection host="rs06ue2dbeerkiosk-sql01.database.windows.net" user="dbadmin" password="1!donwant2b@pirate" databaseName="BeerKioskdatabase" />
	</db:config>
	<http:request-config name="HTTP_Request_config_Tastry" doc:name="HTTP Request configuration" doc:id="8a053ffd-9945-46eb-ab6a-da17064a28c5" basePath="/api">
		<http:request-connection protocol="HTTPS" host="portal.tastry.com" />
	</http:request-config>
	<http:request-config name="HTTP_Request_config_CentralDB" doc:name="HTTP Request configuration" doc:id="0c0ea894-cc0d-4b45-a963-7927ac3e070b" basePath="/centralizeddb" responseTimeout="500000">
		<http:request-connection host="localhost" port="8081" connectionIdleTimeout="60000"/>
	</http:request-config>
	<http:listener-config name="HTTP_Listener_config1" doc:name="HTTP Listener config" doc:id="c22a176f-8162-4541-a62b-0ec6375d2d30" basePath="tastrydata">
		<http:listener-connection host="0.0.0.0" port="8082" />
	</http:listener-config>
	<http:request-config name="HTTP_Request_Config_TastryMock" doc:name="HTTP Request configuration" doc:id="0a1f96d3-94e6-46fb-997e-0b83f411ed4e" basePath="/tastrymock" >
		<http:request-connection host="localhost" port="8083" />
	</http:request-config>
	<http:listener-config name="HTTP_Listener_Config_TastryMock" doc:name="HTTP Listener config" doc:id="ba4028fd-65e2-412b-a143-916215439cf2" basePath="/tastrymock" >
		<http:listener-connection host="localhost" port="8083" />
	</http:listener-config>
	
	<flow name="deltaextractfetchFlow" doc:id="045bc205-8e04-4f37-9ae1-e6851c2a1542" >
		<http:listener doc:name="SAPI to Fetch Delta Extract if available" doc:id="8383230f-60f0-4540-9537-f4f247940823" config-ref="HTTP_Listener_config" path="/deltaextractfetch"/>
		<db:select doc:name="Query to Fetch Differential Data" doc:id="cfe71dcb-db24-450f-845c-dda2c324f3af" config-ref="CentralizedDB_Config">
			<db:sql >SELECT BS.STORE_NUMBER, BS.ITEM_ID, BS.UPC, BS.ITEM_NAME, BS.BEER_CAT_ID, BS.BEER_SUBCAT_ID, BS.BEER_CAT_NAME, BS.BEER_SUBCAT_NAME, NEWDELETEDBEER.STATUS
FROM
(
    (
     SELECT STORE_NUMBER, UPC, 'A' STATUS FROM BEERSTAGE
     EXCEPT
     SELECT STORE_NUMBER, UPC, 'A' STATUS FROM STORE_BEER
    )

    UNION

    (
     SELECT STORE_NUMBER, UPC, 'D' STATUS FROM STORE_BEER 
     EXCEPT
     SELECT STORE_NUMBER, UPC, 'D' STATUS FROM BEERSTAGE
    )
) AS NEWDELETEDBEER

 JOIN

 BEERSTAGE BS ON NEWDELETEDBEER.STORE_NUMBER = BS.STORE_NUMBER
                                AND
                                NEWDELETEDBEER.UPC = BS.UPC</db:sql>
		</db:select>
		<set-payload value="#[%dw 2.0

output application/json

---
payload]" doc:name="Set Payload" doc:id="6afa891d-2baf-4b1b-aee0-65287f4fd057" />
		<logger level="INFO" doc:name="Logger" doc:id="9bab0063-ff59-4748-8ca3-a12073bd5289" message="#[payload]"/>
	</flow>
	
	<flow name="aholdtastryintegrationdbapisFlow" doc:id="ee46e5f8-7036-423c-ab0f-aa6de6a62b7e" >
		<http:listener doc:name="SAPI to Check if a record exists for a given PK" doc:id="87727e91-5de6-4f1a-bea1-7a42755d6020" config-ref="HTTP_Listener_config" path="/tables/{table_name}"/>
		<db:select doc:name="Query to check for a given PK" doc:id="4a343e89-3484-43b2-b50f-1a11ee450db6" config-ref="CentralizedDB_Config">
			<db:sql >#[ &quot; SELECT * FROM $(attributes.uriParams.table_name) WHERE $(payload.pkColName) = :upc_param &quot; ]	</db:sql>
			<db:input-parameters ><![CDATA[#[{`upc_param`:payload.pkColVal}]]]></db:input-parameters>

		</db:select>
		<ee:transform doc:name="Return 'true' or 'false' based on the Query Result" doc:id="8fc03f98-fe9f-431e-8221-1e6299966fd6" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json skipNullOn="everywhere"
---
{
	isBeerPresent:
		if (payload == null or isEmpty(payload)) 
			false
		else
			true
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Log the result" doc:id="73950153-468d-449b-96e5-c0ab411db38d" message="payload"/>
	</flow>
	
	<flow name="insertastryinfoFlow" doc:id="8731c9a6-b84e-44b8-821a-ac459b004c26" >
		<http:listener doc:name="SAPI to Insert Tastry Info into Centralilzed DB" doc:id="2144dff1-5dfc-46a7-9625-50904ce907d3" config-ref="HTTP_Listener_config" path="/tastryinfo"/>
		<set-variable value="#[%dw 2.0
output application/json
---
payload.BeerGroup]" doc:name="BeerGroup List" doc:id="97fe6ab6-81ef-48c2-86f5-79469a359067" variableName="beeGroupList"/>
		<set-variable value="#[%dw 2.0
output application/json
---
payload.BeerType]" doc:name="BeerType List" doc:id="f8b1e952-9b7e-404e-ad45-67b201481091" variableName="beerTypeList"/>
		<set-variable value="#[%dw 2.0
output application/json
---
payload.NewBeer]" doc:name="New Beer List" doc:id="29f60d6d-29b3-47c7-93eb-0c2856d65917" variableName="newBeerList"/>
		<set-variable value="#[%dw 2.0
output application/json
---
payload.NewBeer]" doc:name="Existing Beer List" doc:id="c4a2bbd2-7701-4802-bb59-fffd713e7972" variableName="existingBeerList"/>
		<try doc:name="Try" doc:id="61ee9cac-e8f1-4d0c-ae74-b9d51ad543f2" transactionalAction="ALWAYS_BEGIN">
			<db:bulk-insert doc:name="Insert into 'BEER_GROUP' table" doc:id="1a55c544-c9b9-498f-b021-a702f4445aef" config-ref="CentralizedDB_Config">
			<db:bulk-input-parameters><![CDATA[#[vars.beeGroupList]]]></db:bulk-input-parameters>
			<db:sql>INSERT INTO [dbo].[BEER_GROUP] (BEER_GROUP_ID, BEER_GROUP_NAME) 
 VALUES (:BeerGroupID, :BeerGroupName)</db:sql>
		</db:bulk-insert>
			<db:bulk-insert doc:name="Insert into 'BEER_TYPE' table" doc:id="702b6925-e80f-4cf6-b9c3-9a6199dc0e3f" config-ref="CentralizedDB_Config">
				<db:bulk-input-parameters ><![CDATA[#[vars.beerTypeList]]]></db:bulk-input-parameters>
				<db:sql >  INSERT INTO [dbo].[BEER_TYPE] (BEER_TYPE_ID, NAME, BEER_GROUP_ID) 
  VALUES (:BeerTypeID, :Name, :BeerGroupID)</db:sql>
			</db:bulk-insert>
			<db:bulk-insert doc:name="Insert into 'BEER' table" doc:id="4f4cc66c-2bb5-4615-8c8b-db3e06a32dcf" config-ref="CentralizedDB_Config">
				<db:bulk-input-parameters ><![CDATA[#[vars.newBeerList]]]></db:bulk-input-parameters>
				<db:sql >INSERT INTO [dbo].[BEER] ([UPC], [BRAND], [NAME], [BEER_TYPE_ID], [TASTE], [ABV], [CALORIES], [ORIGIN], [SUB_CATEGORY], [IMAGE_URL], [PRIORITY], [SEASONAL], [COLOR])
VALUES(:Upc, :Brand, :Name, :BeerTypeID, :Taste, :Abv, :Calories, :Origin, :SubCat, :ImageUrl, :Priority, :Seasonal, :Color)</db:sql>
			</db:bulk-insert>
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="ec9efff0-0df9-4f19-966a-7391042f0c6b" >
					<logger level="INFO" doc:name="Logger" doc:id="089cb49f-123d-4d6f-aabc-b4873b77760a" message="Error in the Transaction Boundry"/>
				</on-error-propagate>
			</error-handler>
		</try>
		<logger level="INFO" doc:name="Logger" doc:id="0e01937e-2a6b-4d34-afec-0510bccaa5e1" message="#[payload]"/>
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="Throw Error When Syntax Error" doc:id="b7d2f600-6ccb-4edd-a9ad-35a9001ca962" type="DB:BAD_SQL_SYNTAX">
				<logger level="INFO" doc:name="Logger" doc:id="f877c7fd-bf2c-47e1-81d1-654d8833c821" message="Syntax Error"/>
			</on-error-propagate>
		</error-handler>
	</flow>
	
	<flow name="aholdtastryintegrationprojFlow2" doc:id="079261c5-63f6-40c7-94ab-b35d378badd7" >
		<http:listener doc:name="SAPI to Fetch Image Path" doc:id="2179dc15-0240-46c5-9c49-e06998a5cd3d" config-ref="HTTP_Listener_config" path="/tables/{table_name}/{attr_name}"/>
		<db:select doc:name="Query to fetch Config value for a given key attribute" doc:id="a8e368f2-b96a-4479-a489-ea99d9033c35" config-ref="CentralizedDB_Config">
			<db:sql >#[&quot;SELECT VALUE FROM $(attributes.uriParams.table_name) WHERE ATTR = :attr_param&quot;]</db:sql>
			<db:input-parameters ><![CDATA[#[{`attr_param`: attributes.uriParams.attr_name}]]]></db:input-parameters>
		</db:select>
		<set-payload value="#[%dw 2.0
output application/json
---

payload[0].value]" doc:name="Set the Result" doc:id="c21e1071-7ca8-466b-bce5-ffa806659edf" />
		<logger level="INFO" doc:name="Log the Result" doc:id="58711f9f-2119-4673-aeb7-59471d9b5608" message="Query Result: #[payload]"/>
	</flow>
	<flow name="aholdtastryintegrationprojFlow3" doc:id="9760ea4f-2781-49ba-9c3b-b63073a4e909" >
		<http:listener doc:name="SAPI to Fetch Next Value of a Sequence" doc:id="1f140f0e-ffbf-484d-bcf7-bb0fe058ad66" config-ref="HTTP_Listener_config" path="/sequences/{seq_name}"/>
		<set-variable value="#[attributes.uriParams.seq_name]" doc:name="Set the Sequence Name" doc:id="739e5c9a-1efc-4d88-a40a-827e1ec50210" variableName="seqName"/>
		<db:select doc:name="Query to Fetch Next Value from the given Sequence" doc:id="cf9dfa9e-349c-477b-bee7-c24aac91f2d7" config-ref="CentralizedDB_Config">
			<db:sql >#[&quot;SELECT NEXT VALUE FOR $(vars.seqName) AS SEQ_VAL&quot;] </db:sql>
		</db:select>
		<set-payload value="#[%dw 2.0
output application/json
---

payload[0].seq_val]" doc:name="Set the Result" doc:id="990577c0-7221-467b-a02e-b5a432444686" />
		<logger level="INFO" doc:name="Log the Result" doc:id="e0335308-6cc3-4067-8748-12fa04a01bb6" message="Next Value from Seq.: #[vars.seqName]: #[payload]"/>
	</flow>
	<flow name="pollnpushdeltaextractFlow" doc:id="d1ba34a8-f72d-4223-951f-46ebef8dc76b" >
		<http:listener doc:name="Listener" doc:id="d9290646-de50-4cbe-8676-4e0ab78716ed" config-ref="HTTP_Listener_config1" path="/getdeltaextract"/>
		<http:request method="GET" doc:name="Invoke SAPI to Fetch Delta Extract if available" doc:id="6fbf0cf4-bd01-448b-83cd-3a42b46b67b5" config-ref="HTTP_Request_config_CentralDB" path="/deltaextractfetch" sendCorrelationId="ALWAYS">
			<reconnect />
			<http:response-validator >
				<http:success-status-code-validator values="200" />
			</http:response-validator>
		</http:request>
		<validation:is-not-null doc:name="CheckIfDeltaExtractAvailable" doc:id="3416b57b-75e8-4caa-b1d4-2b281ca06127" value="#[!isEmpty(payload)]" message="Delta Extract is available"/>
		<ee:transform doc:name="ConvertToTastryRequest" doc:id="05d838e6-00e4-474c-b125-2a39593419b0">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  webhook: {
    URL: " http://3ea80186.ngrok.io/return-updated-json-here"
  },
  
  delta: payload
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Make as an Attachment" doc:id="1d0454ee-5c2f-4b73-9a0b-78a5ef77de60" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output multipart/form-data
---
{
	parts: {
		deltaextract : {
      		headers : {
        		"Content-Disposition" : {
		            "name": "deltaextract",
		            "filename": "deltaextract.json"
        		},
        		"Content-Type" : "application/json"
      		},
     		 content : payload
    	}
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<http:request method="POST" doc:name="Request" doc:id="4aa905c9-f4ca-4cb2-99e2-795891854bc3" config-ref="HTTP_Request_config_Tastry" path="/v1/upload/beer">
			<http:headers ><![CDATA[#[output application/java
---
{
	Authorization : 'Bearer H3VW2MS7Q0KZS8C',
	Content-Type : 'application/json'
}]]]></http:headers>
		</http:request>
		<logger level="INFO" doc:name="Logger" doc:id="9f1d94dc-5e20-4321-a92d-b1b0765b7115" message="#[payload]"/>
	</flow>
	
	<flow name="pushtastryinfointodbFlow" doc:id="12dfac42-7b30-4fdb-8606-2fcbfc2b0a67" >
		<http:listener doc:name="Listener" doc:id="3a401730-c165-4e82-b435-d23c4b7d0d7f" config-ref="HTTP_Listener_config1" path="/pairingsinfo"/>
		<set-variable value="#[%dw 2.0
output application/java
---
[]]" doc:name="BeerGroupList" doc:id="8f800926-2fb5-4065-9599-5e8d8b7976d5" variableName="beerGroupList"/>
			
		<set-variable value="#[%dw 2.0
output application/java
---
[]]" doc:name="BeerTypeList" doc:id="ec1caff2-cdd2-4595-aa44-352d65a466fc" variableName="beerTypeList"/>
		<set-variable value="#[%dw 2.0
output application/java
---
[]]" doc:name="NewBeerList" doc:id="bed70d24-fba1-4579-92ce-b8dab9db4c54" variableName="newBeerList"/>
		<set-variable value="#[%dw 2.0
output application/java
---
[]]" doc:name="ExistingBeerList" doc:id="873bc63b-1636-4aca-a5dd-774c2e76a059" variableName="existingBeerList"/>
		<set-variable value="#[%dw 2.0
output application/java
---
[]]" doc:name="StoreBeerList" doc:id="89593253-c2fe-4322-9c6e-552ba880fc8d" variableName="storeBeerList"/>
		<set-variable value="#[%dw 2.0
output application/java
---
[]]" doc:name="StoreInfoList" doc:id="a58a13d1-28aa-46ec-bf86-346988e796c3" variableName="storeInfoList"/>
		<foreach doc:name="For Each" doc:id="9d027f94-443d-43bf-a611-ada5a4224ece" >
			
			<set-variable value="#[payload]" doc:name="Current Element" doc:id="4c5ec319-abe5-4fc4-a9aa-668e8f375359" variableName="currElement"/>
			<set-payload value="#[%dw 2.0
output application/json
---

{
  pkColName: 'UPC',
  pkColVal: trim(vars.currElement.Item_ID) as String
}]" doc:name="SAPI Request" doc:id="0bb9a058-ef03-4461-801a-0ea20895535c" />
			<http:request method="GET" doc:name="Invoke SAPI to get Image Path" doc:id="f35daae0-b33d-4744-9196-3b383033dde2" config-ref="HTTP_Request_config_CentralDB" path="/tables/configtab/IMAGE_PATH" target="imagePath"/>
			<http:request method="POST" doc:name="Invoke SAPI to Check if Beer is Already Available" doc:id="01236053-3a74-4df8-a338-9692028b7cf7" config-ref="HTTP_Request_config_CentralDB" path="/tables/beer">
			</http:request>
			<choice doc:name="Check if Current Beer is Already Available or not" doc:id="2861a066-f6c5-449d-a6c1-a4825ceff222" >
				<when expression="#[payload.isBeerPresent == false]">
					<set-variable value="#[%dw 2.0
output application/java
---

{
	BeerGroupID: vars.currElement.BeerCategoryID as Number,
	BeerGroupName: vars.currElement.Category
}]" doc:name="BeerGroupObj" doc:id="28772f8e-0fc4-44e7-beb2-b37fd0070c55" variableName="beerGroupObj" />
		<set-variable value="#[%dw 2.0
output application/java
---
vars.beerGroupList + vars.beerGroupObj]" doc:name="Add to BeerGroupList" doc:id="f2077460-e866-4969-91d0-2c8a4a2760ab" variableName="beerGroupList" />
		<set-variable value="#[%dw 2.0
output application/java
---
{
	BeerTypeID: vars.currElement.BeerSubCategoryID as Number,
	Name: vars.currElement.Subcategory,
	BeerGroupID: vars.beerGroupObj.BeerGroupID
}]" doc:name="BeerTypeObj" doc:id="38bad6b7-f678-4bc3-b405-c1ca79baefda" variableName="beerTypeObj" />
		<set-variable value="#[%dw 2.0
output application/java
---
vars.beerTypeList + vars.beerTypeObj]" doc:name="Add to BeerTypeList" doc:id="3a947188-42d0-497b-b34a-1cf1c59efbb7" variableName="beerTypeList"/>
<set-variable value="#[%dw 2.0
output application/java
---
{
	Upc: vars.currElement.Item_ID,
	Brand: vars.currElement.Brand,
	Name: vars.currElement.Name,
	BeerTypeID: vars.beerTypeObj.BeerTypeID as Number,
	Taste: vars.currElement.Taste,
	Abv: vars.currElement.ABV as Number,
	Calories: vars.currElement.Calories as Number,
	Origin: vars.currElement.Origin,
	SubCat: vars.currElement.Subcategory,
	ImageUrl: vars.imagePath ++ '/' ++ vars.currElement.ImageFilename,
	Priority: vars.currElement.Priority as Number,
	Seasonal: if (vars.currElement.Seasonal == &quot;false&quot;) 'F' else 'T',
	Color: null
}]" doc:name="BeerObj" doc:id="0fb65eec-6a24-447c-b9cf-468298bf6967" variableName="beerObj"/>
		<set-variable value="#[%dw 2.0
output application/java
---
vars.newBeerList + vars.newBeerObj]" doc:name="Add to NewBeerList" doc:id="361af113-b7e4-4746-ac85-58b10c27cc4c" variableName="newBeerList"/>
					
				
</when>
				<otherwise >
					<set-variable value="#[%dw 2.0
output application/java
---
{
	Brand: vars.currElement.Brand,
	Name: vars.currElement.Name,
	Taste: vars.currElement.Taste,
	Abv: vars.currElement.ABV,
	Calories: vars.currElement.Calories,
	Origin: vars.currElement.Origin,
	SubCat: vars.currElement.Subcategory,
	ImageUrl: vars.imagePath ++ '/' ++ vars.currElement.ImageFilename,
	Priority: vars.currElement.Priority,
	Seasonal: vars.currElement.Seasonal,
	Color: ''
}]" doc:name="BeerObj" doc:id="a0c8a253-6353-4c56-b285-f192d8944ea4" variableName="existingBeerObj" />
		<set-variable value="#[%dw 2.0
output application/java
---
vars.existingBeerList + vars.existingBeerObj]" doc:name="Add to ExistingBeerList" doc:id="f0173c38-6b3a-4e0a-b97f-e0183f560bbc" variableName="existingBeerList" />
				</otherwise>
			</choice>
			<logger level="INFO" doc:name="Logger" doc:id="64db5fcb-17cf-49f4-b0d1-f4fa1f6af92f" message="#[payload]"/>
			<set-payload value="#[vars.currElement.Store_Numbers.ss]" doc:name="Set to Store Nos List" doc:id="4a9e0615-38f3-4ed5-b2c7-74e7fe287862" />
			<foreach doc:name="For Each" doc:id="20940ced-5bde-4d91-85b7-15827dd61ad5" >
				<flow-ref doc:name="Call storerelatedFlow" doc:id="d26b5871-80cf-4956-991c-8e620dc77ad6" name="storerelatedFlow" />
			</foreach>
		</foreach>
		<set-payload value="#[%dw 2.0

output application/json

---

{
	BeerGroup: vars.beerGroupList,
	BeerType: vars.beerTypeList,
	NewBeer: vars.newBeerList,
	ExistingBeer: vars.existingBeerList,
	StoreBeer: vars.storeBeerList,
	StoreInfo: vars.storeInfoList
}]" doc:name="Set Payload" doc:id="5926de52-4242-4f7c-afa7-5d0701970d5c" />
		<!--  <http:request method="POST" doc:name="Invoke SAPI to Insert Tastry Info into CentralizedDB" doc:id="165bdd8e-ae3d-4ce7-b566-af7067812536" config-ref="HTTP_Request_config_CentralDB" path="/tastryinfo"/>-->
	</flow>
	<sub-flow name="storerelatedFlow" doc:id="6eaf9775-b2ac-431c-be2e-690de3a9ad3c" >
		<set-variable value="#[payload]" doc:name="Set Store No." doc:id="8ff740f7-0d31-440a-a2dc-2d9daf268ce1" variableName="storeNum" />
		
		
		<set-payload value='#[%dw 2.0
output application/json
---

{
  "pkColName": "STORE_NUMBER",
  "pkColVal": trim(vars.storeNum) as Number
}]' doc:name="SAPI Payload" doc:id="1da031b2-3e1b-48d4-8001-20bbcda8a699" />
		<http:request method="POST" doc:name="Invoke SAPI to Check if Store Info is Already Available" doc:id="fc399c8c-2a54-4dc6-aa94-74d65af280f3" config-ref="HTTP_Request_config_CentralDB" path="/tables/store_info" />
		<choice doc:name="Check if Current Store Info is Already Available or not" doc:id="b46af52d-903e-4b83-9ad6-ea340f7d49bb" >
			<when expression="#[payload == false]">
				<set-variable value="#[%dw 2.0
output application/java
---
{
	StoreID: 'PK',
	StoreNumber: vars.storeNum
}]" doc:name="StoreInfoObj" doc:id="97692760-0a37-485a-bb4f-97570ef497af" variableName="storeInfoObj" />
				<set-variable value="#[%dw 2.0
output application/java
---
vars.storeInfoList + vars.storeInfoObj]" doc:name="Add to StoreInfoList" doc:id="0705d175-c88c-46c6-a6c6-0b3f3fffff08" variableName="storeInfoList" />
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Log that it is an existing Store Info" doc:id="5f999016-ed92-4828-b893-bfb34ec34041" message="#[(vars.storeNum) ++ ': ' ++ 'Store Beer with Store No. is existing']"/>
			</otherwise>
		</choice>

<set-payload value="#[%dw 2.0
output application/json
---

{
  pkColName: 'BEER_STORE_ID',
  pkColVal: trim(vars.storeNum) as Number
}]" doc:name="SAPI Payload" doc:id="194f3553-11cd-4006-94bd-5ed65922dddd"/>
		<http:request method="POST" doc:name="Invoke SAPI to Check if Store Beer is Already Available" doc:id="7a63447d-6e4a-4fe5-8ff5-465561f9f45a" config-ref="HTTP_Request_config_CentralDB" path="/tables/store_beer"/>
		<choice doc:name="Check if Current Store Beer is Already Available or not" doc:id="39f9151c-6a40-4eca-afe9-afdebc2a1749" >
			<when expression="#[payload == false]">
				<set-variable value="#[%dw 2.0
output application/java
---
{
	BeerStoreID: 'PK',
	Upc: vars.currElement.Item_ID,
	StoreNumber: vars.storeNum
}]" doc:name="StoreBeerObj" doc:id="9aa6d6bd-6ef3-4147-a3a3-a53008526ef9" variableName="storeBeerObj" />
				<set-variable value="#[%dw 2.0
output application/java
---
vars.storeBeerList + vars.storeBeerObj]" doc:name="Add to StoreBeerList" doc:id="11123246-1983-408b-a1a2-a365790a5895" variableName="storeBeerList" />
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Log that it is an existing Store Beer" doc:id="a1f7e5f5-b6cf-4448-a017-5bc828cdf84d" message="#[(vars.storeNum) ++ ': ' ++ 'Store Beer with Store No. is existing']"/>
			</otherwise>
		</choice>

<logger level="INFO" doc:name="Store Object" doc:id="2d0a25d0-27c5-4cd9-8786-60eeb16d351a"/>
	</sub-flow>
	
	<flow name="aholdtastryintegrationprojFlow1" doc:id="c5e0dd78-5e12-4073-9db9-03583c7e6044" >
		<http:listener doc:name="Listener" doc:id="c4bdacea-ea53-46a8-9ca1-89f9d14cfe43" config-ref="HTTP_Listener_config" path="/integration/tastry"/>
		<http:request method="GET" doc:name="Request" doc:id="46981762-78b5-4a12-9a0e-a48917a2bcd4" config-ref="HTTP_Request_config_Tastry" path="/v1/beers/dump">
			<http:headers ><![CDATA[#[output application/java
---
{
	Authorization : 'Bearer H3VW2MS7Q0KZS8C',
	Accept : 'application/json'
}]]]></http:headers>
			<http:query-params ><![CDATA[#[output application/java
---
{
	format : 'json'
}]]]></http:query-params>
		</http:request>
		<logger level="ERROR" doc:name="Logger" doc:id="526574fa-f94e-42f8-a4f0-f23d24cede8e" message="#[payload]"/>
	</flow>
	<flow name="aholdtastryintegrationprojFlow" doc:id="50dbaa7a-00ad-4c9c-af1d-0786305009d2" >
		<http:listener doc:name="Tastry Mock Server" doc:id="6f5e5d3e-0ed8-494b-b809-2a45e16140f0" config-ref="HTTP_Listener_Config_TastryMock" path="/upload/beer"/>
		<set-payload value="#[%dw 2.0
output application/json
input payload multipart/form-data
---
payload.parts.'deltaextract'.content]" doc:name="Set Payload" doc:id="546670a7-0666-4255-bd91-228c5913f53a" />
		<logger level="INFO" doc:name="Logger" doc:id="0f41df41-2a43-44f8-a3de-23b04c1bccdc"/>
	</flow>
</mule>
